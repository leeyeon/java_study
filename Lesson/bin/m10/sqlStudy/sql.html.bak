///////////////////////////////////////////////
1. DDL :: CREATE : TABLE 생성
///////////////////////////////////////////////


CREATE TABE emp_test (
 id NUMBER(3),
 name VARCHAR2(15),
 salary NUMBER(7,2),
 title VARCHAR2(15) default '사원',
 in_date date default sysdate,
 dept_name VARCHAR2(15)
);

///////////////////////////////////////////////
2. 테이블 생성 확인 / Table Record 조회 (DESCRIBE / SELECT)

DESC emp_test;

DESCRIBE emp_test;

SELECT * FROM emp_test;

///////////////////////////////////////////////
3. TEST용 TABLE만들기
==> 1개 이상의 COLUMN을 갖는다.

CREATE TABLE test_table(

);

///////////////////////////////////////////////
4. DDL :: DROP : TABLE 삭제
///////////////////////////////////////////////
CREATE TABLE test_table (
 no NUMBER(10),
 contents VARCHAR2(10)
);

DESC test_table;

SELECT * FROM test_table;

DROP TABLE test_table;

DESC test_table;










///////////////////////////////////////////////
1. DML :: INSERT : TABLE RECORD 입력
///////////////////////////////////////////////
DATE 표현 방식 : SYSDATE :: current time 을 나타내는 SQL KEYWORD
SELECT SYSDATE FROM DUAL;
///////////////////////////////////////////////
DUAL : 출력을 위한 가상(?) TABLE

SELECT 9*9 FROM DUAL;
SELECT USER FROM DUAL;

///////////////////////////////////////////////
COLUMN VALUE 입력

INSERT
INTO emp_test(id, name, salary, title, in_date, dept_name)
VALUES (1, '김사장', 100, '사장', '04-07-19', '개발부');

SELECT * FROM emp_test;

INSERT
INTO emp_test
VALUES (2, '홍길동', 100, '부사장', '2004/07/19', '영업부');

SELECT * FROM emp_test;

INSERT
INTO emp_test(id, name, salary)
VALUES (3, '홍길순', 10000);

SELECT * FROM emp_test;

INSERT
INTO emp_test(id, name, title)
VALUES (4, '이순신', '장군');

SELECT * FROM emp_test;

ROLLBACK;

SELECT * FROM emp_test;

---------------------------------------

- KEYWORD USER/SYSDATE 를 입력할 때 쓸수있음

INSERT
INTO emp_test(id, name, salary, title, in_date, dept_name)
VALUES (2, USER, 100, '부사장', SYSDATE, '영업부');

SELECT * FROM emp_test;


---------------------------------------


- null 묵시적 입력

INSERT
INTO emp_test(id, name)
VALUES (5, '장나라');

SELECT * FROM emp_test;


- null 명시적 입력

INSERT
INTO emp_test
VALUES (6, '신나라',NULL, null, '','');

SELECT * FROM emp_test;

COMMIT;

///////////////////////////////////////////////
테이블 데이터 보기 편하게 하는 PL/SQL Query
			SET LINESIZE 1000;
			SET PAGESIZE 1000;
///////////////////////////////////////////////


///////////////////////////////////////////////
UPDATE : TABLE RECORD 수정
///////////////////////////////////////////////


SELECT * FROM emp_test;

UPDATE emp_test
SET id = 7
WHERE name='SCOTT';

SELECT * FROM emp_test;

ROLLBACK;

SELECT * FROM emp_test;

---------------------------------------

UPDATE emp_test
SET dept_name = '관리부'
WHERE dept_name = '영업부';

SELECT * FROM emp_test;

COMMIT;



UPDATE emp_test
SET title='사장', salary='2000',dept_name='영업팀'
WHERE name = '홍길순';

SELECT * FROM emp_test;

COMMIT;



UPDATE emp_test
SET dept_name = '대기발령'
WHERE salary >= 1500;

SELECT * FROM emp_test;



UPDATE emp_test
SET title='평사원';

SELECT * FROM emp_test;

ROLLBACK;



UPDATE emp_test
SET salary = salary + 500;

SELECT * FROM emp_test;


UPDATE emp_test
SET dept_name = '대기발령'
/*WHERE dept_name = NULL;*/
WHERE dept_name IS NULL;

SELECT * FROM emp_test;

COMMIT;


UPDATE emp_test
SET dept_name = '대기발령'
WHERE dept_name IS NOT NULL;

SELECT * FROM emp_test;

ROLLBACK;


-----------------------------

DELETE FROM emp_test
/* DELETE emp_test */
WHERE title='장군';

COMMIT;


---------------

DELETE emp_test
WHERE id >= 6;

ROLLBACK;


DELETE emp_test
WHERE id >= 5 AND id <= 6;

SELECT * FROM emp_test;

COMMIT;



DELETE FROM emp_test
WHERE id = 2 OR id = 3;

SELECT * FROM emp_test;

ROLLBACK;


///////////////////////////////////

DELETE FROM emp_test;

SELECT * FROM emp_test;

ROLLBACK;




---------------------------------------------------
SELECT
id, name
FROM emp_test;

SELECT
name, id
FROM emp_test;
------------------------------------------------------
ALIAS !!
AS 생략 가능함
------------------------------------------------------

SELECT
name, salary, salary*12
FROM emp_test;


SELECT
name AS 이름, salary AS 월급, salary*12 AS 연봉
FROM emp_test;

SELECT
name 이름, salary 월급, salary*12 연봉
FROM emp_test;

------------------------------------------------------
"" 따옴표로 묶어주면 AS 에 공백 넣을 수 있음
------------------------------------------------------


SELECT
name 이름, salary 월급, salary*12 연봉 성과급 제외
FROM emp_test;

SELECT
name 이름, salary 월급, salary*12 "연봉 (성과급 제외)"
FROM emp_test;


NVL(A,B) A가 NULL 이면 B로 표현해라

SELECT
name, NVL(salary,0)
FROM emp_test;


SELECT
name, NVL(salary,'무급')
FROM emp_test;


------------------------------------------------------
SELECT
name, NVL2(salary, salary, 0), NVL(salary,0)
FROM emp_test;


SELECT
name, NVL2(title, title, '<직급없음>'), NVL(title, '<직급없음>'), NVL2(title, '직급있음', '<직급없음>')
FROM emp_test;



------------------------------------------------------
SELECT
name, DECODE ( title,
				NULL, '<직급없음>', /* if(title=null) <직급없음> */
				'직급있음')			/* else */
FROM emp_test;

SELECT
name, DECODE ( title,
				NULL, '<직급없음>',			/* if(title=null) <직급없음> */
				'사장', '회사의아버지',		/* else if(title='사장') 회사의아버지 */
				'부사장', '회사의어머니',	/* else if(title='부사장') 회사의어머니 */
				'직급있음')					/* else */
FROM emp_test;
